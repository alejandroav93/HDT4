knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("dplyr")
library("ggplot2")
library("httr")
library("readr")
library(rpart)
library(caret)
library(randomForest)
library(tree)
library(rpart.plot)
library(car)
library(cluster) #Para calcular la silueta
library(e1071)#para cmeans
library(mclust) #mixtures of gaussians
library(fpc) #para hacer el plotcluster
library(NbClust) #Para determinar el número de clusters óptimo
library(factoextra) #Para hacer gráficos bonitos de clustering
library(hopkins) #Para revisar si vale la pena hacer agrupamiento
library(GGally) #Para hacer el conjunto de graficos
library(FeatureImpCluster) #Para revisar la importancia de las variables en los grupos.
library(pheatmap) #Para hacer mapa de calor
house <- read.csv("./train.csv", stringsAsFactors = F)
set.seed(123)
quant <- quantile(house$SalePric)
quant
#se toman las variables que se cree predicen propiamente el precio de la casa y el precio real de la casa.
#luego se reemplaza la columna del precio de la casa por una que lo clasifica como economica, intermedio o cara dependiendo de los percentiles.
data <- fread("./train.csv", select = c("OverallQual","OverallCond" ,"GrLivArea", "BedroomAbvGr", "TotRmsAbvGrd", "GarageCars", "SalePrice", "YearBuilt", "LotArea", "LotFrontage"))
data2 <- data %>% mutate(PriceRange = if_else(quant["0%"] <= SalePrice & SalePrice < quant["25%"], "Economica",
if_else(quant["25%"] <= SalePrice & SalePrice < quant["50%"], "Intermedia", "Cara") ))
data2$SalePrice <- NULL
data2$LotFrontage[is.na(data2$LotFrontage)]<-0.0
trainRowsNumber <- sample(1:nrow(data2), 0.7*nrow(data2))
train<-data2[trainRowsNumber,]
test<-data2[-trainRowsNumber,]
arbolModelo <- rpart(PriceRange~.,data2,method = "class")
rpart.plot(arbolModelo)
#-----CORRELACIONES------#
# Correlación de 80.98%
cor(data$OverallQual,data$SalePrice, method = "spearman")
# Correlación de 69.07%
cor(data$GarageCars,data$SalePrice, method = "spearman")
# Correlación de 73.13%
cor(data$GrLivArea,data$SalePrice, method = "spearman")
# Correlación de 65.26%
cor(data$YearBuilt,data$SalePrice, method = "spearman")
#Se importa la libreria para poder hacer plots
library(ModelMetrics)
porcentaje<-0.7
# Set Seed
set.seed(123)
#Lectura de Datos
datos <- fread("./train.csv", select = c("OverallQual","GrLivArea", "GarageCars", "SalePrice", "YearBuilt"))
split_ <- sample(nrow(datos),nrow(datos)*porcentaje)
#Set de datos de entrenamiento y prueba
train1<-datos[split_,]
test1<-datos[-split_,]
# Regresión Lineal Simple
fitLMPW<-lm(OverallQual~SalePrice, data = train1)
#-------
predL<-predict(fitLMPW, newdata = test1)
#Verifición la predicción
resultados<-data.frame(test1$OverallQual,predL)
#Análisis de residuos
# Los residuos se calcula restando la predicción de la variable respuesta
residuales <- test$OverallQual-predL
#Resumen de las pruebas de regresión lineal
summary(fitLMPW)
# Regresión Lineal
rmse(test1$OverallQual,predL)
# Se crea el gráfico de las variables seleccionadas para la regresión
plot(test1$OverallQual, test1$SalePrice)
points(predL, test1$SalePrice, col="red",pch=15)
par(mfrow = c(2,2))
plot(fitLMPW)
start_time <- Sys.time()
arbolModelo <- rpart(PriceRange~.,data2,method = "class")
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
arbolModelo <- rpart(PriceRange~.,data2,method = "class")
end_time <- Sys.time()
tree_time <- end_time - start_time
start_time <- Sys.time()
arbolModelo <- rpart(PriceRange~.,data2,method = "class")
end_time <- Sys.time()
tree_time <- end_time - start_time
tree_time
start_time <- Sys.time()
fitLMPW<-lm(OverallQual~SalePrice, data = train1)
end_time <- Sys.time()
linreg_time <- end_time - start_time
linreg_time
